package app;

import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class instanciando_data {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		// Date Formater: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
		DateTimeFormatter fmt1 = DateTimeFormatter.ofPattern("dd/MM/yyyy"); // Importar biblioteca
		DateTimeFormatter fmt2 = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
		
		LocalDate d01 = LocalDate.now(); // Instanciando data atual
		LocalDateTime d02 = LocalDateTime.now(); // Instanciando data e hora atual
		Instant d03 = Instant.now(); // Instanciando uma data hora GMT atual
		
		// Utilzando Parse para datas e horas anteriores
		LocalDate d04 = LocalDate.parse("2023-06-15"); // data formato ISO8601
		LocalDateTime d05 = LocalDateTime.parse("2023-06-15T05:10:44"); // data e hora formato ISO8601
		Instant d06 = Instant.parse("2023-06-15T05:10:44Z"); // data e hora GMT londres (Z) ISO8601.
		Instant d07 = Instant.parse("2023-06-15T05:10:44-03:00"); // -3 soma mais 3 horas para londres
		
		// Alterando formato de visualização de datas com DateTimeFormatter
		LocalDate d08 = LocalDate.parse("20/07/2022", fmt1);
		LocalDateTime d09 = LocalDateTime.parse("20/07/2022 01:30", fmt2);
		
		
		System.out.println("D01: " + d01.toString()); // data (formato US)
		System.out.println("D02: " + d02.toString()); // data e hora com milisecs (formato US)
		System.out.println("D03: " + d03.toString());
		System.out.println("D04: " + d04.toString()); // Imprimido data no formato que queremos
		System.out.println("D05: " + d05.toString()); // Imprimido data e hora no formato que queremos
		System.out.println("D06: " + d06.toString());
		System.out.println("D07: " + d07.toString());
		System.out.println("D08: " + d08.toString());
		System.out.println("D09: " + d09.toString());
		// OBS: A chamada de um date para ISO8601 basta usarmos um .toString() em um objeto.
	}

}
